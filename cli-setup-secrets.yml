- name: Get information about ansible control machine
  hosts: localhost
  gather_facts: yes

- hosts: all
  gather_facts: no
  tasks:
    - name: ensure that localhost is not skipped
      assert:
        that:
          - '"ansible_hostname" in hostvars.localhost'
        msg:
          - Hostvars from localhost are required to run some tasks.
          - Make sure to include localhost when using --limit.

- name: Setup password store
  hosts: all

  vars:
    pass_gpg_key_fingerprint: "EC5E 11DD EF42 BF79 FBFA 4F4E FF6A DDEB B33A 5D2F" 
    key_filename: "GPG_key_{{ pass_gpg_key_fingerprint | replace(' ', '') }}.asc"
    control_machine_name: "{{ hostvars.localhost.ansible_hostname }}"
    control_machine_address: "{{ control_machine_name }}.local"
    clone_with_key: jw_personal_1
    hide_sensitive_logs: false

  roles:
    - known-hosts

  tasks:

    - name: check for key that has access to password store
      find:
        paths: "{{ ansible_env.HOME }}/.ssh/keys"
        pattern: "{{ clone_with_key }}"
      register: access_key

    - assert:
        that:
          - access_key.matched == 1

    - name: install apt packages
      apt:
        name:
          - expect  # for automatic ssh key unlocking
          - gnupg2  # I want to be able to use gpg2 command for compatibility
          - git
          - xclip  # for putting password in clipboard
          - pinentry-tty  # for unlocking keys in agent without gui
          - pwgen  # password generator
      become: yes

    - name: ensure directories exist
      file:
        dest: "{{ ansible_env.HOME }}/{{ item }}"
        state: directory
        mode: 0700
      loop:
        - .ssh
        - .ssh/keys
        - .gnupg

    - name: copy GPG key for password store
      copy:
        dest: "{{ ansible_env.HOME }}/.gnupg/{{ key_filename }}"
        content: "{{ lookup('passwordstore', 'personal-gpg-key returnall=true') }}"
        mode: 0600
      no_log: "{{ hide_sensitive_logs }}"
      register: gpg_key_status

    - name: import gpg key
      command: gpg2 --batch --import {{ ansible_env.HOME }}/.gnupg/{{ key_filename }}
      when: gpg_key_status.changed

    - name: copy GPG trust database so that keys are trusted
      copy:
        # note that in src we want the HOME of ansible controller user
        src: "{{ hostvars.localhost.ansible_env.HOME }}/.gnupg/trustdb.gpg"
        dest: "{{ ansible_env.HOME }}/.gnupg/trustdb.gpg"
        mode: 0600

    - name: clone password store
      git:
        repo: git@bitbucket.org:jan-warchol/password-store.git
        dest: "{{ passwordstore_path }}"
        update: no  # "yes" can reset --hard unpushed commits
        recursive: no  # "offline" module requires special steps
        key_file: "{{ ansible_env.HOME }}/.ssh/keys/{{ clone_with_key }}"

    - name: configure git user email
      git_config:
        key: user.email
        value: jan.warchol@gmail.com
        repo: "{{ passwordstore_path }}"

    - name: clone special submodule with top-secret passwords
      git:
        accept_hostkey: yes  # low risk since it's over LAN
        # FIXME: passwordstore_path should be taken from control machine hostvars
        repo: jan@{{ control_machine_address }}:{{ passwordstore_path }}/offline
        dest: "{{ passwordstore_path }}/offline"
        key_file: "{{ ansible_env.HOME }}/.ssh/keys/{{ clone_with_key }}"
      # doesn't make sense to clone repo into itself
      when: inventory_hostname != control_machine_name
