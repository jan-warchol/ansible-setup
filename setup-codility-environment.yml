- name: install stuff needed for codility work (packages, repos)
  hosts: all

  roles:
    - known-hosts

  vars:
    chefdk_version: 3.8.14  # TODO: fetch latest version automatically
    chefdk_package_url:
      "https://packages.chef.io/files/stable/\
       chefdk/{{ chefdk_version }}/\
       ubuntu/{{ dist_override_release | default(ansible_lsb.release) }}/\
       chefdk_{{ chefdk_version }}-1_amd64.deb"
    aws_authenticator_url:
      "https://amazon-eks.s3-us-west-2.amazonaws.com/\
       1.11.5/2018-12-06/bin/linux/amd64/aws-iam-authenticator"
    chef_client_key: "{{ lookup('passwordstore', 'codility/chef-user-key returnall=true') }}"
    codility_email: jan.warchol@codility.com
    aws_key_id: "{{ lookup('passwordstore', 'codility/aws-access-key-id returnall=true') }}"
    aws_secret_key: "{{ lookup('passwordstore', 'codility/aws-secret-access-key returnall=true') }}"
    aws_dev_key_id: "{{ lookup('passwordstore', 'codility/aws-dev-access-key-id returnall=true') }}"
    aws_dev_secret_key: "{{ lookup('passwordstore', 'codility/aws-dev-secret-access-key returnall=true') }}"
    # other variables pulled from host_vars/group_vars:
    # CODILITY_REPO_PATH
    # INFRA_REPO_PATH

  tasks: 

    - name: clone infrastructure repository
      git:
        repo: git@gitlab.codility.net:codility/infrastructure.git
        dest: "{{ INFRA_REPO_PATH }}"
        update: no

    - name: clone codility repository
      git:
        repo: git@gitlab.codility.net:codility/codility.git
        dest: "{{ CODILITY_REPO_PATH }}"
        update: no

    - name: Set git user email
      git_config:
        name: user.email
        value: "{{ codility_email }}"
        path: "{{ item }}"
      loop:
        - "{{ INFRA_REPO_PATH }}"
        - "{{ CODILITY_REPO_PATH }}"

    - name: ensure directories exist
      file:
        dest: "{{ item }}"
        state: directory
      loop:
        - "{{ INFRA_REPO_PATH }}/.chef"
        - "{{ ansible_env.HOME }}/.aws"

    - name: install chef client key
      copy:
        dest: "{{ INFRA_REPO_PATH }}/.chef/client.pem"
        content: "{{ chef_client_key }}"
        mode: 0600
      no_log: true

    - name: install AWS keys for rake
      copy:
        dest: "{{ INFRA_REPO_PATH }}/.chef/knife-secrets.rb"
        content: |
          knife[:aws_access_key_id] = "{{ aws_key_id }}"
          knife[:aws_secret_access_key] = "{{ aws_secret_key }}"
        mode: 0600
      no_log: true

    - name: install AWS config
      copy:
        dest: "{{ ansible_env.HOME }}/.aws/config"
        content: |
          [default]
          region = us-east-1

          [codility-dev]
          region = eu-central-1

    - name: install AWS credentials
      copy:
        dest: "{{ ansible_env.HOME }}/.aws/credentials"
        content: |
          [default]
          aws_access_key_id = {{ aws_key_id }}
          aws_secret_access_key = {{ aws_secret_key }}

          [codility-dev]
          aws_access_key_id = {{ aws_dev_key_id }}
          aws_secret_access_key = {{ aws_dev_secret_key }}
      no_log: true

      # separate download step because apt module times out on chef website
    - name: download chefdk
      get_url:
        url: "{{ chefdk_package_url }}"
        dest: "/tmp/chefdk_{{ chefdk_version }}-1_amd64.deb"
        timeout: 60
      tags: chef-installation

    - name: install chefdk
      apt:
        deb: "/tmp/chefdk_{{ chefdk_version }}-1_amd64.deb"
      become: yes
      tags: chef-installation

    - name: install additional packages
      apt:
        name:
          - git-crypt  # for secrets in k8s-infrastructure repo
          - socat  # for dbtunnel
          - jq  # for argocd setup and terraform state parsing
          - postgresql-client-common
          - postgresql-client
      become: yes

    - block:
        # As of 2019 there's no PPA, so we scrape packer website and download
        # .zip from there.

        - name: get url pointing to the latest packer .zip
          shell: >
            wget --quiet https://www.packer.io/downloads.html -O- |
            grep -P "\d+\.\d+\.\d+_linux_amd64\.zip" |
            cut -d'"' -f2
          args:
            warn: False
          register: packer_latest_url
          failed_when: packer_latest_url.rc > 0
          changed_when: False

        - name: download and unarchive packer binary
          unarchive:
            src: "{{ packer_latest_url.stdout }}"
            dest: "{{ ansible_env.HOME }}/bin"
            remote_src: yes

    - name: Add kubernetes APT key
      apt_key:
        data: "{{ lookup('file', 'files/google-packages-signing-key.asc') }}"
      become: yes

    - name: add kubernetes APT repository
      apt_repository:
        # why xenial is hardcoded in instructions from
        # https://kubernetes.io/docs/tasks/tools/install-kubectl/ ?
        repo: 'deb https://apt.kubernetes.io/ kubernetes-xenial main'
        filename: kubernetes
      become: yes

    - name: install kubectl
      apt:
        name: kubectl
        state: latest
      become: yes

    - name: install aws cli
      pip:
        name: awscli
        extra_args: --user

      # https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html
    - name: download AWS authenticator
      get_url:
        url: "{{ aws_authenticator_url }}"
        dest: "{{ ansible_env.HOME }}/bin/aws-iam-authenticator"
        mode: +x

    - debug:
        msg: Now run scripts/configure from infrastructure repo.

    - debug:
        msg: Also run make in codility/deployment

    - debug:
        msg: Also install docker using docker playbook
