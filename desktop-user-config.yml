# This role manages configuration that differs across my accounts
# or is otherwise infeasible to track as part of my [dotfiles repository]
# (https://github.com/jan-warchol/dotfiles).  For example:
#
# * I need different ssh config for personal and work accounts,
#
# * I may want to ensure that some specific host fingerprints are present
#   in my `known_hosts` file, but it would not make sense to track the whole
#   file in git, as I don't care much about most of its contents,
#
# * Some desktop environment settings are stored in binary files - it doesn't
#   make sense to track these files, but rather track the commands that produce
#   the effects I want (e.g. `gsetttings set org.gnome.foo bar`).
#
# * Some settings are too casual to keep them in version control (for example
#   file manager bookmarks), but I still don't want to loose them accidentally.
#   In such cases I move them to my private data directory so that they are
#   backed up (I don't backup my whole HOME dir because there's too much stuff
#   there, like git repositories, large binary files etc.) and set up symlinks
#   to their original locations.

- name: Configuration related to graphical desktop
  hosts: all
  vars:
    # user directories (relative to $HOME)
    xdg_documents_dir: data
    xdg_music_dir: multimedia/muzyka
    xdg_pictures_dir: multimedia/obrazy
    xdg_videos_dir: multimedia/filmy

  tasks:

    - name: ensure directories exist
      file:
        path: "{{ ansible_env.HOME }}/.config/systemd/user/"
        state: directory

    - name: configure redshift service
      copy:
        content: |
          [Unit]
          Description=Redshift

          [Service]
          ExecStart=/usr/bin/redshift -c {{ ansible_env.HOME }}/.config/redshift/redshift.conf

          [Install]
          WantedBy=default.target
        dest: "{{ ansible_env.HOME }}/.config/systemd/user/redshift.service"

    - name: manage redshift service
      systemd:
        daemon_reload: yes
        name: redshift
        enabled: yes
        state: started
        scope: user

    - name: create XDG and other directories
      file:
        path: "{{ ansible_env.HOME }}/{{ item }}"
        state: directory
      with_items:
        - "{{ xdg_documents_dir }}"
        - "{{ xdg_music_dir }}"
        - "{{ xdg_pictures_dir }}"
        - "{{ xdg_videos_dir }}"
        - zasoby
        - bin
        - data
        - multimedia
        - multimedia/obrazy
        - multimedia/filmy
        - multimedia/muzyka
        - multimedia/zdjÄ™cia
        - inbox
        - src
        - tmp

    - name: update user-dirs.dirs
      copy:
        content: |
          # This file is written by xdg-user-dirs-update
          # If you want to change or add directories, just edit the line you're
          # interested in. All local changes will be retained on the next run
          # Format is XDG_xxx_DIR="$HOME/yyy", where yyy is a shell-escaped
          # homedir-relative path, or XDG_xxx_DIR="/yyy", where /yyy is an
          # absolute path. No other format is supported.
          #
          XDG_DESKTOP_DIR="$HOME/"
          XDG_DOWNLOAD_DIR="$HOME/inbox"
          XDG_TEMPLATES_DIR="$HOME/"
          XDG_PUBLICSHARE_DIR="$HOME/"
          XDG_DOCUMENTS_DIR="$HOME/{{ xdg_documents_dir }}"
          XDG_MUSIC_DIR="$HOME/{{ xdg_music_dir }}"
          XDG_PICTURES_DIR="$HOME/{{ xdg_pictures_dir }}"
          XDG_VIDEOS_DIR="$HOME/{{ xdg_videos_dir }}"
        dest: ~/.config/user-dirs.dirs

    - name: update file manager bookmarks
      copy:
        content: |
          file://{{ ansible_env.HOME }}/{{ xdg_documents_dir }} Data
          file://{{ ansible_env.HOME }}/{{ xdg_music_dir }} Muzyka
          file://{{ ansible_env.HOME }}/{{ xdg_pictures_dir }} Obrazy
          file://{{ ansible_env.HOME }}/{{ xdg_videos_dir }} Filmy
          file://{{ ansible_env.HOME }}/inbox Inbox
          file://{{ ansible_env.HOME }}/src/ansible-setup ansible-setup
          file://{{ ansible_env.HOME }}/src/code-samples code-samples
          file://{{ ansible_env.HOME }}/src/selenized selenized
          file://{{ ansible_env.HOME }}/src/limestone-colors limestone
        dest: ~/.config/gtk-3.0/bookmarks

    - name: remove default XDG directories
      # cannot use file module because I want to delete only empty directories
      shell: >
        rmdir {{ item }}
      args:
        chdir: "{{ ansible_env.HOME }}"
        warn: False
      register: task_result
      changed_when: task_result.stderr == ''
      failed_when: '"Directory not empty" in task_result.stderr'
      loop:
        - Desktop
        - Documents
        - Downloads
        - Music
        - Pictures
        - Public
        - Templates
        - Videos
        - Pulpit
        - Dokumenty
        - Pobrane
        - Muzyka
        - Obrazy
        - Publiczne
        - Szablony
        - Wideo

      # I prefer to keep installed fonts in another location
    - name: update fonts directory location
      shell: >
        if [ -d ~/.fonts ]; then
            mv -n ~/.fonts ~/zasoby/czcionki
        else
            mkdir ~/zasoby/czcionki
        fi
        creates=~/zasoby/czcionki

    - name: create link to ~/.fonts
      file:
        src: ~/zasoby/czcionki
        dest: ~/.fonts
        state: link
        force: no



# I don't want to put terminator config file directly under version control,
# because I'm often experimenting with new color palettes and tracking these
# changes would be too cumbersome. However, I want to have a "seed" version of
# the config ready for deploying on new machines.

- name: Ensure terminator config contains desired settings
  hosts: all
  gather_facts: yes
  tags: terminator
  vars:
    conf_dir: "{{ ansible_env.HOME }}/.config/terminator"
  tasks:

    - name: Install terminator
      apt:
        name: terminator
      become: yes

    - name: set terminator as default terminal
      alternatives:
        name: x-terminal-emulator
        path: /usr/bin/terminator

    - name: ensure .config/terminator directory exists
      file:
        path: "{{ conf_dir }}"
        state: directory

      # Inserting block with my settings into default config would not work
      # (terminator wouldn't parse that).
    - name: check whether the config has proper format
      command: grep 'ANSIBLE MANAGED BLOCK' "{{ conf_dir }}/config"
      register: grep_result
      changed_when: grep_result.rc == 1
      failed_when: false  # missing config is not a problem

      # If this is the first ansible run, replace config file
    - name: backup incompatible config
      command: >
        mv
        "{{ conf_dir }}/config"
        "{{ conf_dir }}/.config.{{ ansible_date_time.iso8601 }}"
      when: grep_result.rc == 1
      failed_when: false  # missing config is not a problem

    - name: template seed Terminator configuration
      blockinfile:
        dest: "{{ conf_dir }}/config"
        backup: yes
        create: yes
        insertbefore: BOF
        block: |
          [global_config]
            always_split_with_profile = True
            suppress_multiple_term_dialog = True
            inactive_color_offset = 1.0
            scroll_tabbar = True
            title_inactive_bg_color = "#637b86"
            title_inactive_fg_color = "#072938"
            title_receive_bg_color = "#12ab9e"
            title_receive_fg_color = "#072938"
            title_transmit_bg_color = "#3c8ae6"
            title_transmit_fg_color = "#072938"
          [keybindings]
            broadcast_all = None
            close_term = None
            close_window = None
            switch_to_tab_1 = <Primary>1
            switch_to_tab_2 = <Primary>2
            switch_to_tab_3 = <Primary>3
            switch_to_tab_4 = <Primary>4
            switch_to_tab_5 = <Primary>5
            switch_to_tab_6 = <Primary>6
          [layouts]
            [[default]]
              [[[child1]]]
                type = Terminal
                parent = window0
              [[[window0]]]
                type = Window
                parent = ""
          [plugins]
          [profiles]
            [[dark 0.10.1]]
              background_color = "#103c48"
              background_image = None
              cursor_color = "#cad8d9"
              font = Ubuntu Mono 12
              foreground_color = "#adbcbc"
              palette = "#184956:#fa5750:#75b938:#dbb32d:#4695f7:#f275be:#41c7b9:#72898f:#2d5b69:#ff665c:#84c747:#ebc13d:#58a3ff:#ff84cd:#53d6c7:#cad8d9"
              scroll_on_output = False
              scrollback_infinite = True
              scrollbar_position = hidden
              use_system_font = False
              word_chars = "-A-Za-z0-9,./?%&#_"
            [[grey 0.10.1]]
              background_color = "#3b3b3b"
              background_image = None
              cursor_color = "#e5e5e5"
              font = Ubuntu Mono 12
              foreground_color = "#c6c6c6"
              palette = "#484848:#ff5e56:#7cc03f:#e3ba35:#4f9bfe:#fa7cc5:#4acec0:#8f8f8f:#5b5b5b:#ff6d63:#8bcf4e:#f3c945:#61aaff:#ff8bd4:#5cdecf:#e5e5e5"
              scroll_on_output = False
              scrollback_infinite = True
              scrollbar_position = hidden
              use_system_font = False
              word_chars = "-A-Za-z0-9,./?%&#_"
            [[black 0.10.1]]
              background_color = "#181818"
              background_image = None
              cursor_color = "#dedede"
              font = Ubuntu Mono 12
              foreground_color = "#b9b9b9"
              palette = "#252525:#ed4a46:#70b433:#dbb32d:#368aeb:#eb6eb7:#3fc5b7:#777777:#3b3b3b:#e67f43:#83c746:#efc541:#a580e2:#ff81ca:#56d8c9:#dedede"
              scroll_on_output = False
              scrollback_infinite = True
              scrollbar_position = hidden
              use_system_font = False
              word_chars = "-A-Za-z0-9,./?%&#_"
            [[black 0.11.1]]
              background_color = "#181818"
              background_image = None
              cursor_color = "#777777"
              font = Ubuntu Mono 12
              foreground_color = "#b9b9b9"
              palette = "#252525:#ff615d:#4fba36:#e9c326:#06a0f0:#eb82af:#00ccc1:#777777:#3b3b3b:#e78438:#64cd48:#fed53d:#37b2ff:#b88fe9:#0adfd4:#dedede"
              scroll_on_output = False
              scrollback_infinite = True
              scrollbar_position = hidden
              use_system_font = False
              word_chars = "-A-Za-z0-9,./?%&#_"
            [[black 0.11.0]]
              background_color = "#181818"
              background_image = None
              cursor_color = "#dedede"
              font = Ubuntu Mono 12
              foreground_color = "#b9b9b9"
              palette = "#252525:#ff605c:#58b841:#ebc439:#00a1f2:#f681b2:#2fc5be:#777777:#3b3b3b:#fa9548:#62cc48:#ffd63f:#b68ee8:#ff93c0:#00ded3:#dedede"
              scroll_on_output = False
              scrollback_infinite = True
              scrollbar_position = hidden
              use_system_font = False
              word_chars = "-A-Za-z0-9,./?%&#_"

