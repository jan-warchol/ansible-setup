- name: Get information about ansible control machine
  hosts: localhost
  gather_facts: yes

- hosts: all
  gather_facts: no
  tasks:
    - name: ensure that localhost is not skipped
      assert:
        that:
          - '"ansible_hostname" in hostvars.localhost'
        msg:
          - Hostvars from localhost are required to run some tasks.
          - Make sure to include localhost when using --limit.

- name: Setup password store
  hosts: all

  vars:
    control_machine_name: "{{ hostvars.localhost.ansible_hostname }}"
    control_machine_address: "{{ control_machine_name }}.local"
    gpg_sync_dir: "~/.gnupg/import-export/"

  roles:
    - known-hosts

  tasks:

    - name: install apt packages
      apt:
        name:
          - expect  # for automatic ssh key unlocking
          - gnupg2  # I want to be able to use gpg2 command for compatibility
          - git
          - xclip  # for putting password in clipboard
          - pass
          - pinentry-tty  # for unlocking keys in agent without gui
          - pwgen  # password generator
      become: yes

    - name: ensure directories exist
      file:
        dest: "{{ item }}"
        state: directory
        mode: 0700
      loop:
        - ~/.ssh/
        - ~/.ssh/keys/
        - ~/.gnupg/
        - "{{ gpg_sync_dir }}"
        - ~/.gnupg/openpgp-revocs.d/
        - ~/.gnupg/private-keys-v1.d/

    - name: export control machine pubring and ownertrust
      shell: |
        gpg2 --export --armor > {{ gpg_sync_dir }}/{{ control_machine_name }}_pubring.asc &&
        gpg2 --export-ownertrust > {{ gpg_sync_dir }}/{{ control_machine_name }}_ownertrust
      delegate_to: localhost
      run_once: yes

    - name: sync data (one-way)
      synchronize:
        # trailing slash is important
        src: "{{ item }}/"
        dest: "{{ item }}/"
        mode: push
      loop:
        # use ~ instead of ansible_env.HOME because it should expand
        # differently on src host and dest host
        - ~/.gnupg/private-keys-v1.d/
        - ~/.gnupg/openpgp-revocs.d/
        - "{{ gpg_sync_dir }}"

    - name: import pubring and ownertrust
      shell: |
        gpg2 --import {{ gpg_sync_dir }}/{{ control_machine_name }}_pubring.asc &&
        gpg2 --import-ownertrust {{ gpg_sync_dir }}/{{ control_machine_name }}_ownertrust

    - name: clone password store
      git:
        repo: git@bitbucket.org:jan-warchol/password-store.git
        dest: "{{ passwordstore_path }}"
        update: no  # "yes" can reset --hard unpushed commits
        recursive: no  # "offline" module requires special steps

    - name: configure git user email
      git_config:
        key: user.email
        value: jan.warchol@gmail.com
        repo: "{{ passwordstore_path }}"

    - name: clone special submodule with top-secret passwords
      git:
        accept_hostkey: yes  # low risk since it's over LAN
        # FIXME: passwordstore_path should be taken from control machine hostvars
        repo: jan@{{ control_machine_address }}:{{ passwordstore_path }}/offline
        dest: "{{ passwordstore_path }}/offline"
      # doesn't make sense to clone repo into itself
      when: inventory_hostname != control_machine_name

    - name: configure git user email
      git_config:
        key: user.email
        value: jan.warchol@gmail.com
        repo: "{{ passwordstore_path }}/offline"
